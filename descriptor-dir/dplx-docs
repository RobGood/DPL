{
   "README" : "DPL webservice request dispatcher docs\n\n (webservice calls to http://.../api/dplx/~target-desc~)\n\nIn this implementation, the DPL dispatcher consists of two parts;\nA webserver-facing part (in this case a cgi-bin, but could also be mod_perl say,\nor a standalone webserver like dpld), and a descriptor-facing part which\nloads and invokes the target descriptor.\n(btw, the webserver has '/api' configured as an alias for '/cgi-bin')\n\nThe first part is a cgi-bin script 'dplx' which is invoked by the Apache webserver\nto handle the request.  This script collects information about the request from\nthe environment, constructs a PrimaLisp interpreter and uses the interpreter to\neval the request 'bootstrap' code.\n\nThe second part is the DPL descriptor 'dplx' which gets invoked via the bootstrap code.\nThis descriptor finishes the request dispatch by loading the target descriptor\nand calling its (main), or filtering the request using api-entry-points and evaling the\nassociated handler code.\n\n--\n\nOn entry to (main) in the target descriptoer these variables will have been set,\naccording to the particulars of the request:\n  user-agent            \n  path-info             \n  query-hash            \n  request-method        \n  request-content-type  \n  request-content  \n     \nThe target descriptor (the one to be invoked) is identified from path-info and loaded.\nThe descriptor's  request-from-client  schema (if present) defines a tree of\n\"$request-method/$path-info\" patterns the descriptor will accept.\nIf no schema is defined, the descriptor's (main) function is called.\n\nThe function  (find-handler)  returns the matching 'handler'\nbased on specific $request-method and $path-info values for this request.\nIf no matching handler is found, an exception is thrown.\n\nThe value returned by (find-handler) is a map (presumed to be)\ncontaining an '.on-match.' field.  If not, an exception is thrown.\nThis contents of this field will soon after be eval'd,\nand may produce the response or not.\n\nIf a complete response is produced by this handler code,\nit must return undefined to signal completion.\nBy convention a non-zero value is returned to signal\nthat no response at all has been produced.\nPartial responses should probably be avoided.\n\nIn the case that no response was produced (non-zero return),\nor that there was no request-from-client schema (no api handlers, simpler case),\nthe target descriptor's (main) function will be called.\n\nPath components must match corresponding paths in the schema exactly.\nOtherwise, path components of the form  ~{var-name}~  act as wildcards.\nIn this case the path component is deemed to match and\nits value is saved in the variable  req-{var-name}.\n\nOtherwise an exception is thrown.\n\nThrown exceptions result in some form of HTTP error response.",
   "_dateCreated" : "Fri Jan 28 01:01:40 2011",
   "_useCount" : 11,
   "rcs-id" : "$Id: dplx-docs,v 1.13 2012/03/07 05:08:59 apache Exp apache $"
}
