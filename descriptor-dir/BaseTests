{
   "_dateCreated" : "Fri Oct 22 00:38:28 2010",
   "_useCount" : 428,
   "compare-results-to-expected" : "(fn (field -- test-passed? r e r+ e+ msg colour msg-html)\n  (= r (desc-get $results / $field))\n  (= e (desc-get $expect  / $field))\n\n  (= r+ (if (undef? $r) '<undef>' \"<|$r|>\"))\n  (= e+ (if (undef? $e) '<undef>' \"<|$e|>\"))\n\n  // (report '#2 field: %s; Result: %s, Expected: %s' $field $r+ $e+)\n  // (report '#2 r: %s' (desc-to-string $results))\n  // (report '#2 e: %s' (desc-to-string $expect))\n\n  (= test-passed?\n    (if (&& (undef? $r) (undef? $e))  1\n        (|| (undef? $r) (undef? $e))  0\n                                          (eq $r $e)))\n\n  (= msg (if $test-passed?\n            \"#$nTests. Passed ($path/$name/$field $r+ $e+)\"\n            \"#$nTests. FFFFFFFFailed, $field expected: $e+, $field returned: $r+\"))\n\n  (report %s $msg)\n\n  (if (! $test-passed?)\n    (push $test-results-list (sprintf '%10s  %-22s %-11s %s\\n' $path $name $field $msg)))\n\n  (= colour (if $test-passed? 00ff00 ff0000))\n\n  (= msg-html (sprintf '<font color=\"#%s\">%s</font>' $colour (xmlencode $msg)))\n\n  (hash-set $self $path \"$name.out.$field.html\" $msg-html)\n  (push $test-results-html-list $msg-html)\n\n  $test-passed?\n)",
   "do-one-map" : "(fn (path)  (report \" >> (do-one-map $path)\\n\")\n  (map-list run-test\n    (sort-alpha\n      (grep (fn (k) (== (list-len (split '\\\\.' $k)) 1))\n        (hash-keys $self $path))))\n)",
   "main" : "(fn ()\n  (= nTests  0)\n  (= nPasses 0)\n  (= nFails  0)\n  (= test-results-list (list))\n  (= test-results-html-list (list))\n\n  (= start-time (time))\n  (= start-date (date))\n\n  // Run the tests defined in each Map.\n  (map-list do-one-map (desc-eval $self / get-tests))\n\n  (= end-time (time))\n  (= end-date (date))\n  (= duration (- $end-time $start-time))\n\n  // Write out the results.\n  (desc-write {\n     date-started  $start-date\n     date-done     $end-date\n     duration      (sprintf '%.3fs' $duration)\n     nFails        $nFails\n     nPasses       $nPasses\n     nTests        $nTests\n    0results.html (sprintf '<font size=\"-2\">\\n%s\\n</font>'\n                    (join '<br/>\\n' $test-results-html-list))\n   }\n   Tests-report)\n\n  // I'd like to write to Tests here but then Tests picks up\n  // fields from BaseTests, then ignores any changes to BaseTests!\n  (desc-write $self Tests.results (hash no-checkpoint 1))\n\n  // (var-dump (hash allns 1))\n  (reply)\n)",
   "on-load" : "(fn ()\n  (def-hash-fn $self {\n    / [\n      main\n      reply\n      do-one-map\n      run-test\n      compare-results-to-expected\n    ]\n  })\n)",
   "rcs-id" : "$Id: BaseTests,v 1.21 2013/04/18 18:51:22 apache Exp apache $",
   "reply" : "(fn ()\n  (ct)(bl)\n\n  (print \"session: $session-id\\n\")\n  (print \" nTests: $nTests\\n\")\n  (print \"nPasses: $nPasses\\n\")\n  (print \" nFails: $nFails\\n\")\n\n  (printf 'Tests ran for %.3fs\\n' $duration)\n  (printf 'Tests started at %s\\n' $start-date)\n  (printf 'Tests done    at %s\\n' $end-date)\n\n  (Stats)\n  (map-list print $test-results-list)\n)",
   "run-test" : "(fn (name)  (report ' >> (%s %s)' $. $name)\n  (= results  {})\n  (var-clear fn expect)\n\n (&&\n  (catch (do (= fn   (hash-eval $self $path  $name)) 1)\n    (do\n      (report \"Can't eval test function '$path/$name': $_err\")\n      (hash-set $results / exception $_err)\n      0))\n\n  (catch (do (= expect (hash-eval  $self $path \"$name.expect\")) 1)\n    (do\n      (report \"Can't eval expected result '$path/$name.expect': $_err\")\n      (hash-set $results / exception $_err)\n      0))\n\n  // (report %s \"#1 fn-to-test: $fn\")\n  // (report '#1 r: %s' (desc-to-string $results))\n  // (report '#1 e: %s' (desc-to-string $expect))\n\n\n  (do\n    // Run each test in its own namespace/varMap.\n    (= test-env {fn $fn self $self pid $pid})\n\n    (= ns-name $name)\n\n    (catch (hash-set $results / value     (namespace \"Tests.$ns-name\" $test-env \n                                            (var-push fn   $fn)\n                                            (var-push self $self)\n                                            (var-push pid  $pid)\n                                            ($fn)))\n           (hash-set $results / exception $_err))\n\n    // (report '#11 r: %s' (desc-to-string $results))\n    // (report '#11 e: %s' (desc-to-string $expect))\n    ()\n  )\n )\n  \n  (hash-clear $self $path \"$name.out.value.html\")\n  (hash-clear $self $path \"$name.out.exception.html\")\n\n  (= nTests (+ 1 $nTests))\n\n  (= cond1 (compare-results-to-expected value))\n  (= cond2 (compare-results-to-expected exception))\n\n  (if (&& $cond1 $cond2)\n       (= nPasses (+ 1 $nPasses))\n       (= nFails  (+ 1 $nFails)))\n)"
}
