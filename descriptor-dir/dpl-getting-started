{
   "README" : "This is an introduction to using DPL.\n\nA call to the base uri returns a simple overview and list of examples to work through.\nA call for an example uri returns an eval box loaded with sample code and explanation.",
   "_dateCreated" : "Mon Mar 18 16:43:44 2013",
   "_useCount" : 497,
   "api" : {
      "get-example-paths" : "(fn ()\n  (sort-alpha\n    (grep (fn (path) (eq '/example-' (substr $path 0 9)))\n      (hash-paths $self))))",
      "show-top-page" : "(def-fn get-line-from-example (name)\n  (split '\\n' (hash-get $self $path $name)))\n\n(def-fn trim-example-header-line (line)\n  (substr (first (split '\\n' $line)) 2))\n\n\n(def-fn html-README-block (header lines) [\n <tr>\n  '<td valign=\"top\">'\n   (html-a {id \"y$n\" href \"javascript:toggle('x$n', 'y$n', '⊞', '⊟');\"} '⊞')\n  </td>\n  '<td valign=\"top\">'\n (html-a {id \"y$n\" href \"javascript:toggle('x$n', 'y$n', '⊞', '⊟');\"} (html-h 2 $header))\n (html-div {id \"x$n\" style 'display: none'}\n  (eval-all (join '\\n' $lines))\n  (html-ul\n    (foreach name $example-names\n      (html-li (html-a {href \"${uri-base-ex}${path}/${name}\"}\n                  (trim-example-header-line (hash-get $self $path $name))))))\n )\n </td>\n </tr>\n])\n\n(def-fn render-example (path -- uri-base-ex  example-names rm-lines rm-header)\n  (= uri-base-ex   (sprintf /api/dplx/%s $self/name))\n  (= example-names\n    (sort-alpha\n      (grep (fn (name) (ne README $name))\n        (hash-keys $self $path))))\n\n  (= rm-lines  (get-line-from-example README))\n  (= rm-header (shift $rm-lines))\n\n  (++n)\n  (html-README-block $rm-header $rm-lines))\n\n------\n(fn ( -- n)\n  (= n 0)\n  (reply-html (html-top-page\n    (map-list render-example\n      (get-example-paths)))))"
   },
   "example-0" : {
      "README" : "README\n\n(html-p\n  'You should work on one set of examples at a time.' <br/>\n  'To work through the examples in a set:'\n  (html-ul\n   (html-li 'Open each of the links a its own tab, a few at a time probably,')\n   (html-li \"Read the $html-eval-box on each tab,\")\n   (html-li 'Click the \\'evaluate\\' button to run the example.')\n  )\n  'In a set of examples, one example often builds on the previous one, '\n  'demonstrating some use case.'\n)"
   },
   "example-1" : {
      "1.1" : "# the simple case\n\n'hello world'",
      "1.2" : "# another way to return the message\n\n(reply-text 'hello world')",
      "2.1" : "# the message in a list\n\n[ hello world ]",
      "2.2" : "# the message in a JSON list\n\n(reply-json [ hello world ])",
      "3.1" : "# the message in a hash\n\n{ message 'hello world' }",
      "3.2" : "# returning a JSON object\n\n(reply-json {\n  message 'hello world'\n})",
      "4" : "# returning a more structured JSON object\n\n(reply-json {\n  message 'hello world'\n  date (isodate)\n  version (version)\n  1 {\n    2 {\n      answer 42\n    }\n  }\n})",
      "5" : "# returning some HTML too\n\n(reply-html\n  (html-html\n    (html-head\n      (html-title 'Example Title'))\n    (html-body {}\n      (html-h 1 'Example Heading')\n      (html-p (html-b 'Hello world'))\n    )\n  )\n)",
      "6" : "# returning some HTML and list of descriptors too\n\n(reply-html\n  (html-html\n    (html-head\n      (html-title 'Example Title'))\n    (html-body {}\n      (html-h 1 'Example Heading')\n      (html-p (html-b 'Hello world'))\n\n      (html-h 1 'List of available descriptors')\n      (html-ul\n        (map-list html-li\n          (desc-list * {show-all (true)})))\n    )\n  )\n)",
      "README" : "The archetypical first program\n\n(html-p 'These examples show a few ways to show the message.')"
   },
   "example-2" : {
      "1" : "# create the first user\n\n# Initially, when there are no users added to the system\n# the call to (user-add) must be made anonymously.\n# Once the first user is added, the user-* calls are authenticated.\n\n(bi-import Authentication_DPL!)\n\n[\n  (= pw (rand-guid))\n  (catch (user-add OMNI $pw $pw) $[_err])\n]",
      "2" : "# create the some other users\n\n(if (ne OMNI $userid)\n  (throw \"User OMNI needs to run this.\"))\n\n# Copy the guid from previous example, that's OMNI's password.\n\n(bi-import Authentication_DPL!)\n\n(= passwords {\n  root     [(= pw (rand-guid)) $pw {authLevel 1}]\n  admin    [(= pw (rand-guid)) $pw {authLevel 10}]\n})\n\n[\n  $[passwords]\n\n  (user-list)\n\n  (foreach userid (hash-keys $passwords)\n    (user-add $userid @(hash-get $passwords / $userid)))\n\n  (user-list)\n\n  (map-list (fn (userid) (catch (user-list $userid) $[_err]))\n    (user-list))\n]",
      "3" : "# start the signup worker\n\n(if (ne admin $userid)\n  (throw \"User admin needs to run this.\"))\n\n# Copy the guid from previous example, that's admins's password.\n\n(bi-import Authentication_DPL!)\n(desc-read _ user)\n\n[\n  (signup-worker-status)\n  (signup-worker-start)\n  (signup-worker-status)\n]",
      "4" : "# stop the signup worker\n\n(if (ne admin $userid)\n  (throw \"User admin needs to run this.\"))\n\n# Copy the guid from previous example, that's admins's password.\n\n(bi-import Authentication_DPL!)\n(desc-read _ user)\n\n[\n  (signup-worker-status)\n  (signup-worker-stop)\n  (signup-worker-status)\n]",
      "5" : "# restart the signup worker\n\n(if (ne admin $userid)\n  (throw \"User admin needs to run this.\"))\n\n# Copy the guid from previous example, that's admins's password.\n\n(bi-import Authentication_DPL!)\n(desc-read _ user)\n\n[\n  (signup-worker-status)\n  (signup-worker-stop)\n  (signup-worker-start)\n  (signup-worker-status)\n]",
      "6" : "# get the signup worker's status\n\n(if (ne admin $userid)\n  (throw \"User admin needs to run this.\"))\n\n# Copy the guid from previous example, that's admins's password.\n\n(bi-import Authentication_DPL!)\n(desc-read _ user)\n\n[\n  (signup-worker-status)\n]",
      "README" : "Setting up DPL users\n\n(html-p 'These scripts demonstrate user management.')"
   },
   "html" : {
      "html-top-page" : "(def-fn html-controls () [\n  (bracket-link (html-link \"/api/dplx/user/log$log-in-out\"   \"Log$log-in-out\"))\n  (bracket-link (html-link \"/api/dplx/user/signup\"           \"Signup\"))\n  (bracket-link (html-link (sprintf /api/dple/%s?_workspaceName=/lib-dpl $self/name)\n                  \"$view-edit source\"))\n  (if (defined? $userid) \" signed in as $userid\")\n  // \" (workspace $workspace-name)\"\n  ''\n])\n\n\n(fn (examples -- log-in-out view-edit html-eval-box) \n  (= log-in-out    (if (defined? $userid) out  in))\n  (= view-edit     (if (defined? $userid) Edit View))\n  (= html-eval-box (html-link /api/eval 'eval box'))\n\n  (html-app-template\n    (html-controls)\n/*\n    (html-p 'DPL is a decentralized social computing environment; '\n      (html-ul\n         'it\\'s like a wiki, but for writing programs rather than writing documents,' <br/>\n         'it\\'s like a spreadsheet, but hierarchical rather than tabular.'\n       ))\n*/\n    <table>\n    $examples\n    </table>))"
   },
   "main" : "(def-macro redirect-to-eval-on-example-request ( -- name path blurb url)\n  (= name (pop $path-list))\n  (= path (join / $path-list))\n\n  (if (defined? $name) (do\n    (= blurb (hash-get $self \"/$path\" $name))\n    (if (undef? $blurb)\n      (return (reply-text 'Nothing found.')))\n\n    (= url (sprintf '/api/dplx/eval?load=%s' (urlencode $blurb)))\n    (return (redirect-to $url))\n  ))\n)\n\n(fn ()\n  (redirect-to-eval-on-example-request)\n  (show-top-page)\n)",
   "on-load" : "(fn ()\n  (desc-read _ HTML-macros)\n\n  (def-hash-fn $self {\n    /api [\n      show-top-page\n      get-example-paths\n    ]\n\n    /html [\n      html-top-page\n    ]\n  })\n\n  (= dpl-face '#%^)')\n  (= html-dpl-face \"<b><i><tt>${dpl-face}</tt></i></b>\")\n\n  (= v (version))\n  (= dpl-version-string (sprintf 'v%s/%s'\n                          (hash-get $v / version)\n                          (hash-get $v / date)))\n\n\n  (= app-title 'Getting started with DPL')\n)",
   "rcs-id" : "$Id: dpl-getting-started,v 1.175 2013/04/13 00:17:23 apache Exp apache $"
}
