{
   "00-index" : "(def-fn link (name) (concat <li>(html-link \"#$name\" $name)</li>))\n\n(concat\n  <ul>\n   (link 10-basics)\n   (link 12-variables)\n   (link 13-builtins)\n   (link 15-functions)\n   (link 16-macros)\n   (link 20-exceptions)\n   (link 25-database-access)\n   (link 30-web-service)\n   (link 32-interpreter-extensions)\n   (link 35-responses)\n   (link 40-misc)\n   (link 45-v1.0-platform)\n   (link 45-v1.5-platform)\n   (link 50-download)\n  </ul>\n\n (html-p (concat\n    'Click the example title to load it into <tt>eval</tt>. <br/ >'\n    'Once there, maybe edit the example, click <tt>evaluate</tt>, <br/>'\n    'See result, go back, repeat...  try a different example, repeat...'\n ))\n)",
   "10-basics" : {
      "00" : "'hello world.'",
      "01" : "// from http://research.swtch.com/2010/03/utf-8-bits-bytes-and-benefits.html\n'Hello World or Καλημέρα κόσμε or こんにちは 世界'",
      "0210" : "// Arithmetic...\n(+ 1 1)",
      "0220" : "// Arithmetic...\n(sqrt (*  2  5  4  2.5 ))",
      "03" : "// Call a builtin function.\n(date)"
   },
   "12-variables" : {
      "01" : "// Set some variables, print some results.\n\n(= width  12.4)\n(= height 24.1)\n\n(= unit-cost 12.49)\n\n(= area (× $width $height))\n(= price (sprintf '%.2f' (× $area $unit-cost)))\n\n\"It'll cost \\$$price to do $area sqft.\"",
      "015" : "// Set some variables, print some results.\n// use variable attributes to store units.\n\n(= width  12.4)\n(= height 24.1)\n\n(= unit-cost 12.49)\n\n(= area (× $width $height) (hash u sqft))\n(= price (sprintf '%.2f' (× $area $unit-cost)) (hash u '$'))\n\n(= f (× 0.0254 12) (hash u m/ft))\n(= areaM (sprintf '%.2f' (× $f $f $area)) (hash u sqm))\n\n\n(sprintf \"It'll cost %s$price to do $area %s ($areaM %s).\"\n  $price/u $area/u $areaM/u)",
      "02" : "// Variable names can contain a wider range of characters.\n\n(def-fn even? (val) (== 0 (% $val 2)))\n\n(= ~these-are-valid-too-!@%^&*+=:<>|\\{}[]-in-some-var!! (even? 42))\n\n(ct)(bl)\n(printf 'val: %s\\n' (if $~these-are-valid-too-!@%^&*+=:<>|\\{}[]-in-some-var!! even odd))",
      "08" : "// This example shows a 'here' document, i.e. a multi-line quote.\n// The terminating delimiter is defined between '<<' and end of line,\n// and must appear at the beginning of a line in order to end the quote.\n\n(= text <<FINI\nThis is a HERE doc\na multi-line \"quote structure\"\nwith variable 'interpolation', pid: $pid\n FINI\nFINI)\n\n(join '\\n' (reverse (split '\\n' $text)))",
      "10" : "// List the current namespace's variables and their values.\n// This is the data and most of the functions available to the code.\n\n(def-fn list-vars ()\n  (map-list (fn (_)\n      (sprintf '%s : %s' $_ (first (hash-get $:vars: / $_))))\n    (sort-alpha (hash-keys $:vars: /))))\n\n(ct)(bl)\n(map-list println (list-vars))",
      "11" : "// List another  namespace's variables and their values.\n\n(def-fn list-vars ()\n  (map-list (fn (_)\n      (sprintf '%s : %s' $_ (first (hash-get $:vars: / $_))))\n    (sort-alpha (hash-keys $:vars: /))))\n\n(ct)(bl)\n(namespace alternate\n  (map-list println (list-vars)))",
      "20-quine" : "// This evaluates to itself.\n$expr"
   },
   "13-builtins" : {
      "01" : "// Show the list of builtin functions and their usage messages.\n(ct)(bl)(Help)\n\n// (ct) prints the Content-Type header line (default: text/plain)\n//      additional response headers can be printed here.\n// (bl) prints a blank line to end the HTTP header."
   },
   "15-functions" : {
      "00" : "// empty",
      "01" : "// Define a named function and call it.\n(def-fn greet (name) \"Hello $name\")\n(greet your-name-here)",
      "02" : "// Unicode friendly too.\n(def-fn ☺ (name) \"☺ hello $name ☺\")\n(☺ bart)",
      "025" : "// Very friendly.\n(def-fn こんにちは世界 (ଓଔକଖ) (sprintf 'Καλημέρα κόσμε %s' $ଓଔକଖ))\n(こんにちは世界 ሞሟሠሡሢ)",
      "03" : "// Define an anonymous function and call it.\n((fn (name) \"Hello $name\") your-name-here-too)",
      "04" : "// Pass a function to another function\n\n(def-fn hammer       (arg) \"hammer the $arg\")\n(def-fn tape-measure (arg) \"tape-measure the $arg\")\n\n(def-fn worker (name tool-fn work)\n  (printf 'worker, %s has tool %s' $name ($tool-fn $work)))\n\n\n(ct)(bl)\n(println (hammer nail))\n(println (tape-measure floors))\n\n(println (worker chris  hammer       wood))\n(println (worker pat    tape-measure walls))\n(println (worker sam    hammer       wood))\n\n(= who   chris)\n(= what  hammer)\n(= where roof)\n\n(println (worker $who $what $where))",
      "10" : "// Load functions from a Descriptor.\n\n// This descriptor ('v1.0') defines functions that hit the v1.0 API and return\n// data parsed from the responses.  This example returns a list of\n// strings found in the <Versions/> block of the getVersion response\n// and illustrates composing basic functionality on the fly.\n// See also (platform-versions) definition at  http://srvdevlnx01/api/dple/v1.0\n\n(desc-read self v1.0)\n(= platform-hosts (list srvdevweb01 srvapplweb01))\n\n\n// Define some functions we'll apply to the hosts list.\n(def-fn print-version (host)\n  (printf '\\nPlatform host: %s\\n' $host)\n  (map-list (fn (_) (printf ' -> %s\\n' $_)) (platform-versions $host)))\n\n(def-fn show-raw-responses (host)\n  (printf '\\nPlatform host: %s\\n' $host)\n  (print (pm-call $\"platform-response-$host\" toString 1)))\n\n\n// Start output.\n(ct)(bl)\n(print 'Processed Responses\\n')\n(map-list print-version $platform-hosts)\n(print '\\n\\n')\n\n(print 'Raw XML Responses\\n')\n(map-list show-raw-responses $platform-hosts)\n\n// Return undefined value to signal that the response has been handled.\n// Otherwise, another header and 'ARRAY(0x.....)' is appended...\n()"
   },
   "16-macros" : {
      "01" : "// Define a macro and call it.\n// Macros are just functions that are called with their arguments *unevaluated*.\n// Regular functions have their arguments evaluated first,\n// and then are called with the resulting values.\n// Macro functions can decide which args to eval, and how many times.\n//\n// Macros are sometimes handy.\n\n// Define the macro, like defining a function.\n(def-macro macro-demo (expr)\n  (sprintf 'value of  %s\\nis  %s\\n' $expr (eval $expr)))\n\n// Now call it.  The argument is passed as a string rather than being evaluated here.\n(macro-demo (sqrt (time)))",
      "02" : "// There is no 'foreach'... but we can make one.\n\n(def-macro foreach (var in-list &exprs)\n  (= body-fn  (sprintf '(fn (%s) %s)'\n                (eval $var)\n                (join ' ' $exprs)))\n\n  (printf \"body-fn: $body-fn\\n--\\n\")\n\n  (map-list (fn (i) ($body-fn $i)) (eval $in-list))\n)\n\n\n\n(ct)(bl)\n\n(foreach x (.. 1 10)\n  (= y (+ 10 $x))  // (assign-to y (the-sum-of 10 and the-value-of x))\n  (printf 'xx: %d, yy: %d\\n' (* $x $x) (* $y $y)))\n\n\n(print \"\\n\\nNotice though that we've littered:\\n\\nbody-fn: $body-fn\\ny: $y\\n\")",
      "03" : "// This a way of using scoped variables to avoid littering.\n\n(def-macro foreach (var in-list &exprs)\n  ((fn (body-fn)\n    (printf \"body-fn: $body-fn\\n--\\n\")\n    (map-list (fn (i) ($body-fn $i)) (eval $in-list))\n  ) (sprintf \"(fn (%s) %s)\" (eval $var) (join ' ' $exprs)))\n)\n\n\n\n(ct)(bl)\n\n(foreach x (.. 1 10)\n    ((fn (y)\n      (printf 'xx: %d, yy: %d\\n' (* $x $x) (* $y $y))\n    ) (+ 10 $x))\n)\n\n(print \"\\n\\nNotice now we haven't:\\n\\nbody-fn: $body-fn\\ny: $y\\n\")",
      "04" : "// Now (2011-01-07) it's even easier...\n\n(desc-read _ Constructs) \n\n\n(ct)(bl)\n\n(foreach x (.. 1 10)\n    ((fn (y)\n      (printf 'xx: %d, yy: %d\\n' (* $x $x) (* $y $y))\n    ) (+ 10 $x))\n)\n\n(print \"\\n\\nNotice we still haven't littered:\\n\\ny: $y\\n\")"
   },
   "20-exceptions" : {
      "01" : "// Notice (e.g. in RESTclient) this gives a 400 return status and message.\n(throw something)",
      "02" : "// Notice this gives a 400 return status and message.\n(some-undefined-function that we call)",
      "03" : "// Notice this gives a 400 return status and message.\n(some (malformed (stuff",
      "04" : "// Calling a dropped builtin.\n(concat\n (perl-eval 'system \"date\"')\n 'Got here!')",
      "10" : "// Catching exceptions\n\n(concat\n (catch\n  (perl-eval 'system \"date\"')\n  \"Caught Exception: $_err\\n\")\n\n 'Got here!')"
   },
   "25-database-access" : {
      "01" : "(desc-read self dbi-tests)\n\n(db-query \n   srvdevmysql15:3306\n   ''\n   'show databases;'\n   1000\n)",
      "02" : "(desc-read self dbi-tests)\n\n(= sql <<FINI\n\nselect fromNode from edge where toNode = getKeyword('sushi');\n\nFINI)\n\n(= rows (db-query \n   srvdevmysql15:3306\n   WikiFullDeep_20100130_Analysed_20100518\n   $sql\n   1000\n  ))\n\n(map-list (fn (_) (hash id (first $_))) $rows)"
   },
   "30-web-service" : {
      "01" : "// Echo the HTTP request headers.\n(= hdrs (http-headers))\n\n(join '\\n' (map-list (fn (_)\n    (sprintf '%s: %s' $_ (hash-get $hdrs / $_)))\n  (sort-alpha (hash-keys $hdrs /))))",
      "02" : "// Evaluate expressions on a remote interpreter.\n\n// get list of local descriptors.\n(= local-list\n  (desc-list *)\n)\n\n// get list of remote descriptors.\n(= remote-list (rem-eval srvdevlnx04\n  (desc-list *)\n))\n\n\n(def-fn show-list (msg list)\n  (= n 0)\n  (printf \"$msg\\n---\\n\")\n  (map-list (fn (_)\n      (printf \"$_%s\" (if (== 0 (% (++_ n) 5)) ',\\n' ', ')))\n    $list)\n  (printf '\\n---\\n\\n'))\n\n\n(ct)(bl)\n(show-list ' local descriptor list' $local-list)\n(show-list 'remote descriptor list' $remote-list)",
      "05" : "// Check the bitcoin exchange prices.\n\n(= urls (list\n  http://mtgox.com/code/data/ticker.php\n  http://mtgox.com/code/data/getDepth.php\n  http://mtgox.com/code/data/getTrades.php\n))\n\n// Yes, you could also say:\n// (= urls (map-list (fn (_) \"http://mtgox.com/code/data/$_.php\")\n//    (list ticker getDepth getTrades)))\n\n(def-fn fetch-show (url)\n  (printf \" ** url: %s\\n\" $url)\n  (print  (desc-to-string (desc-from-string (deref-url $url))))\n  (print  '\\n'))\n\n(ct)(bl)\n(map-list fetch-show $urls)",
      "06" : "// Do a Solr Feeds query.\n\n(= term korea)\n(desc-read self solr.test)\n\n(ct)(bl)\n(print (desc-to-string (query $term)))",
      "10" : "// Make a new webservice consisting of arbitrary api stubs,\n// and calls it.\n\n(= demo-webservice-name \n   pre-test-002\n)\n\n(= my-name (concat $demo-webservice-name -from- $remote-addr))\n\n(= api-definition (list\n  // Put other entry points you want to create here.\n  // DON'T put a space between the HTTP method and URI.\n  GET/\n  GET/version\n  GET/query/~terms~  // the ~terms~ path component value\n                     // is available in $req-terms\n  POST/update\n))\n\n// Define functions required for dplx descriptors.\n(def-fn stub-on-load () )\n(def-fn stub-main ()\n  (ct)(bl) (printf 'accepted %s %s\\n' $request-method $path-info))\n\n// Create the descriptor, copy dplx required functions just created.\n(= d (hash))\n(hash-set $d / on-load $stub-on-load)\n(hash-set $d / main    $stub-main)\n(hash-set $d / rcs-id  (sprintf '$%s$' Id))\n\n// Set an additional field for the api entry point list.\n(hash-set $d / api-entry-points\n     (sprintf '(list\\n%s\\n)' (join '\\n' $api-definition)))\n\n// Deploy it.\n(desc-write $d $my-name)\n\n// At this point a new webservice endpoint exists that didn't before.\n\n// Lets call it and return it's response.\n(= response (deref-url \"http://localhost/api/dplx/$my-name\"))\n\n// Now you can begin editting the generated stubs to fill in implementation.\n// Go to  http://srvdevlnx01/api/dple  and look for the name you chose.\n\n// Start response.\n(ct)(bl)\n(print \"created new webservice descriptor $my-name\\n\")\n\n// Don't forget to return the response.\n(emit $response)"
   },
   "32-interpreter-extensions" : {
      "01" : "// See what Feed Engines are around.\n(bi-import FeedEngine (fe-names))",
      "02" : "// See what feeds they have.\n(bi-import FeedEngine\n  (map-list (fn (name) (hash $name (fe-feed-list $name))) (fe-names)))",
      "03" : "// Let's see about a different server.\n(rem-eval srvdevlnx04\n  (bi-import FeedEngine (fe-names)))",
      "04" : "// Let's see about a different server.\n(rem-eval srvdevlnx04\n  (bi-import FeedEngine\n    (map-list (fn (name) (hash $name (fe-feed-list $name))) (fe-names))))",
      "10" : "// Get feed info from a Production feed engine.\n\n(rem-eval ec2-75-101-238-183.compute-1.amazonaws.com:8080\n  (bi-import FeedEngine\n    (= fe-name Primal)\n    (fe-feed-info $fe-name (fe-feed-list $fe-name))))"
   },
   "35-responses" : {
      "01" : "// Return some random XML.\n(= content-type text/xml)\n(concat\n\n<doc>\n<item>\n  <title> Ahh! </title>\n</item>\n</doc>\n\n)",
      "02" : "// Return some random HTML.\n(= content-type text/html)\n(concat\n\n<html><head><title>'random html'</title><head>\n<body>\n  <h1> <blink>'Ahh! My Eyes!'</blink> </h1>\n</body>\n</html>\n\n)",
      "03" : "// Redirection\n(emith 'Status: 300 Redirect')\n(emith 'Location: http://primal.com')\n(bl)",
      "10" : "// Uploading a file.\n\n(ct text/html)(bl)\n\n(emit <<FINI\n<html>\n<body>\n<form method='POST' action='/api/dplx/upl-test' enctype='multipart/form-data'><table>\n<tr><td><input type='file' size='50' name='file1'/></td></tr>\n<tr><td><input type='submit' value='Upload file'/></td></tr>\n</table>\n</form>\n</body></html>\nFINI)"
   },
   "40-misc" : {
      "01" : "// The right JSON viewer acts as a descriptor pretty printer.\n//  (If you use firefox and you get no joy from this example, try installing\n//   JSONview from  https://addons.mozilla.org/en-US/firefox/addon/jsonview/ )\n\n// This is the pretty printed implementation of the eval endpoint,\n// See also the 'Edit' link --->.\n$self",
      "02" : "// See also (map-list)\n\n// This returns the sum of the first $max cubes.\n\n(= max 100)\n\n(def-fn sum-cubes (a x)  (+ $a (* $x $x $x)))\n\n(list-reduce sum-cubes (.. 1 $max))",
      "03" : "// Import arbitrary functionality already existing.\n// This is an interface to a set of command line utilities that do \n// data dispersal and reconstruction.\n\n(bi-import RSS95!)\n\n(ct)(bl)\n\n(= data (repeat 'hello world\\n' 10))\n(print \"input data:\\n$data\\n--\\n\")\n\n(= original (rss95-disperse 17 11 (gzip $data)))\n(printf \"encoded data:\\n%s\\n\" (desc-to-string $original))\n\n(= failed (shuffle-list (rss95-fail 4 $original)))\n(printf \"failed data:\\n%s\\n\" (desc-to-string $failed))\n\n(= output (gunzip (rss95-recombine $failed)))\n(printf \"reconstructed data:\\n%s\\n\" $output)",
      "04" : "// This example sends a SirQL query to D-Wave\n// See  http://srvdevlnx01/api/dple/D-Wave\n// for the implementation and clickable links to these pages:\n//      http://dwavesys.com/\n//      http://sirql.dwavesys.com/\n//      http://sirql.dwavesys.com/console/\n\n// You can also POST SirQL statements to http://srvdevlnx01/api/dplx/D-Wave/sirql\n// and get back JSON results.\n\n(desc-read self D-Wave)\n\n(query-sirql <<FINI\n\nFIND IndependentSet (vtx)\nFROM Vertex\nWHERE NOT EXISTS (SELECT * \n                    FROM IndependentSet i1, IndependentSet i2, Edge e\n                   WHERE i1.vtx = e.vtx1 AND i2.vtx = e.vtx2)\n  AND 3 <= (SELECT COUNT(*) FROM IndependentSet)\n\nFINI)",
      "05" : "// Just new today 2011-01-28\n\n(bi-import GraphPartialVisualizer!)\n\n(= resp (gpv-query srvdevmysql15 ap_rich pony 100))\n\n(ct image/png)(bl)\n(emit (hash-get $resp / graph))",
      "06" : "// Define a some hierarchy on a wiki page using bulleted lists.\n// Point a wiki-hierarchy-parser at it and get back its parse tree.\n\n(= wiki-host            srvcorpwiki)\n(= wiki-page-name       UF_CD_VI_AR_78)\n(= definition-list-id   Sample_Definitions)\n\n(= whp (new-inst wiki-hierarchy-parser $wiki-host))\n($whp parse-from-page $wiki-page-name $definition-list-id)",
      "07-uima-demo" : "(= max 10)\n(= remote-server  apstage-feed-01)\n\n// Run the enclosed code on the EC2 AP server.\n// It returns a list of concept labels and definitions.\n(= response (rem-eval $remote-server\n  (bi-import UIMA!)\n\n  // A previous manual step processed 10k AP XML docs.\n  // This returns their ids.\n  (= uima-id-list (uima-get-processed-list))\n\n  // Take the first $max for demo.\n  (= uima-id-list (map-list (fn (_) (shift $uima-id-list)) (.. 1 ,$max)))\n\n  // for each XMI doc id,\n  //   get the XML, parse it, pull out entities found and collect them.\n  (map-list (fn (id)\n      (push $out (uima-extract-entities\n          (xml-parse (uima-get-xmi-doc $id)))))\n    $uima-id-list)))\n\n\n// Return response as JSON.\n(ct application/json) (bl)  // Content-Type, blank line.\n(emit (desc-to-string $response))"
   },
   "45-v1.0-platform" : {
      "01" : "// This shows DPL object method calls on a v1.0 platform client class,\n// returning JSON results.\n\n(= term      java)\n(= max-items 10)\n(= domain-id e73f3250-2952-4867-8a69-7952f7b4ea6b)\n\n(= server srvdevweb01)\n\n(= ph       (new-inst v1.0 $server))\n(= versions ($ph platform-versions))\n(= domains  ($ph get-domains))\n(= bsq      ($ph build-subset-query $domain-id $max-items $term))\n\n(hash\n  server   $server\n  versions $versions\n  bsq      $bsq\n  domains  $domains\n)",
      "012" : "// This shows DPL object method calls on a v1.0 platform client class,\n// returning JSON results.\n// This one lets you specify the domain by caption.\n\n(= term           egypt)\n(= max-items      10)\n(= domain-caption \"Recent RSS\")\n(= server         srvdevweb01)\n\n(= ph        (new-inst v1.0 $server))\n(= versions  ($ph platform-versions))\n(= domains   ($ph get-domains))\n(= domain-id ($ph get-domain-id-by-caption $domains $domain-caption))\n(= bsq       ($ph build-subset-query $domain-id $max-items $term))\n\n(hash\n  server   $server\n  versions $versions\n  bsq      $bsq\n  domains  $domains\n)",
      "015" : "// Invoke an action on the v1.0 platform.\n\n(= content-type text/xml)\n(deref-url (concat\nhttp://srvapplweb01/build/service.svc/actionExecuteSubset?\ntimeoutMs=3000&\nsourceDomainID=1cea23bb-a7a3-4063-934b-21c50d0d92de&\nactionIdentifier=[147]&\nuserID=anonymous&\nincludeUris=1&\nmaxItemsToImport=30&\nsourceConceptIdentifier=%2Fblackberry%2FSecurity%2Bbasics&\ncollectionLimit=20&\nclearDestinationDomain=0 ))"
   },
   "45-v1.5-platform" : {
      "000-list-domains" : "// List v1.5 domains available to a user.\n\n(= user-name your-name-here)\n(= server    srvdevapp15:8091)\n\n(= ph (new-inst v1.5 $server))\n($ph user-domain-list $user-name)",
      "001-create-domain" : "// Create a new v1.5 user domain.\n\n(= user-name your-name-here)\n(= label     'Some Domain Label Here')\n(= server    srvdevapp15:8091)\n\n(= ph (new-inst v1.5 $server))\n($ph user-domain-create $user-name $label)",
      "002-create-concepts" : "// Create concepts (by label) in a v1.5 user domain.\n\n(= user-name    your-name-here)\n(= domain-label 'Some Domain Label Here')\n(= server       srvdevapp15:8091)\n\n(= labels    (list\n  'Some first concept Label Here'\n  'Some second concept Label Here'\n  'Some third concept Label Here'\n  'Some fourth concept Label Here'))\n\n(= ph (new-inst v1.5 $server))\n(= domain-id ($ph get-domain-id-by-label $user-name $domain-label))\n($ph create-concepts $domain-id $labels)",
      "002-create-concepts-hier" : "// Create concepts hierarchy in a v1.5 user domain.\n\n(= user-name    your-name-here)\n(= domain-label 'Some Domain Label Here')\n(= server       srvdevapp15:8091)\n\n(= labels    (list\n  (list parent001 child001-01 child001-02 child001-03)\n  (list parent002 child002-01 child002-02)\n  (list parent003 child003-01 child003-02 child003-03 child003-04)\n))\n\n(= ph (new-inst v1.5 $server))\n(= domain-id ($ph get-domain-id-by-label $user-name $domain-label))\n($ph create-concepts-hier $domain-id $labels)",
      "01-cloud" : "// This shows DPL object method calls on a v1.5 platform client class,\n// returning JSON results.\n\n(= query-terms Wikipedia)\n(= domain-id   9999)\n(= server      srvdevapp15:8091)\n\n(= v1.5 (new-inst v1.5 $server $domain-id))\n($v1.5 cloud $query-terms)",
      "01-query" : "// This shows DPL object method calls on a v1.5 platform client class,\n// returning JSON results and measuring dpl overhead.\n\n(= term1     golf)\n(= term2    'tiger woods')\n(= domain-id 9999)\n(= server    srvdevapp15:8091)\n\n(= t0 (time))\n  (= v1.5 (new-inst v1.5 $server $domain-id))\n  (= resp ($v1.5 query $term1 $term2))\n(= t1 (time))\n\n(= outer-time (- $t1 $t0))\n(= inner-time (hash-get $resp / 01-call-duration))\n\n(hash\n  outer-time  $outer-time\n  inner-time  $inner-time\n\n  dpl-overhead        (÷ (- $outer-time $inner-time) $outer-time)\n  resp                $resp\n)",
      "015-query" : "// This shows DPL object method calls on a v1.5 platform client class,\n// returning JSON results and measuring dpl overhead.\n\n(= term1     Batman)\n(= domain-label 'UIMA test 2011-02-15')\n(= server    srvdevapp15:8091)\n\n(= t0 (time))\n  (= v1.5 (new-inst v1.5 $server))\n  (= domain-id ($v1.5 get-domain-id-by-label rcg $domain-label))\n\n  (= v1.5 (new-inst v1.5 $server $domain-id))\n  (= resp ($v1.5 concepts $term1))\n(= t1 (time))\n\n(= outer-time (- $t1 $t0))\n(= inner-time (hash-get $resp / 01-call-duration))\n\n(hash\n  outer-time  $outer-time\n  inner-time  $inner-time\n\n  dpl-overhead        (÷ (- $outer-time $inner-time) $outer-time)\n  resp                $resp\n)",
      "02-uima" : "// UIMA analysis into v1.5 domain.\n\n(= raw\n(rem-eval ec2-174-129-118-149.compute-1.amazonaws.com\n (desc-read self uima-tests)\n (def-hash-fn $self / main)\n (main)\n))\n\n(= concept-defs\n  (map-list (fn (rec -- row)\n       (= row (hash-get $rec / definition))\n       (unshift $row (hash-get $rec / label))\n       $row)\n    $raw))\n\n(= user-name rcg)\n(= domain-label 'UIMA test 02-14')\n\n(= ph (new-inst v1.5 srvdevapp15:8091))\n(catch\n  ($ph user-domain-create $user-name $domain-label)\n  (report \"ignoring: $_err\"))\n\n(= domain-id ($ph get-domain-id-by-label $user-name $domain-label))\n($ph create-concepts-hier $domain-id $concept-defs)\n\nok."
   },
   "50-download" : {
      "01" : "// Download a DPL distribution file to install DPL on your local machine.\n// Get a zip file with (get-DPL-dist zip)\n(get-DPL-dist)"
   },
   "README" : "This is the source for the eval examples.",
   "_useCount" : 150,
   "rcs-id" : "$Id: eval-docs-examples,v 1.153 2012/07/09 15:29:54 apache Exp apache $"
}
