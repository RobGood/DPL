{
   "README" : "This pretty prints a descriptor and shows differences between two revisions.",
   "_dateCreated" : "Mon Jun  6 23:58:28 2011",
   "_useCount" : 161,
   "api" : {
      "pprint" : "(fn (desc -- lines)\n  (if (string? $desc)\n    (desc-read desc $desc))\n\n  (= lines (join '' (pprint-desc-list $desc)))\n  (emit \"\\n$lines\")\n  (list-len (split '\\n' $lines))\n)",
      "pprint-all" : "(fn ()\n  (= nfiles 0)\n  (eprintf 'total lines: %s\\n' (list-reduce + (map-list (fn (d-name)\n     (= nlines 0)\n\n     (catch\n       (do\n         (desc-read d $d-name (hash no-on-load 1))\n\n         (if (defined? (= id (hash-get $d / rcs-id)))\n           (do\n             (= nlines (pprint $d))\n             (report 'desc[%d]: %s, nlines: %d  %s'\n               (++_ nfiles) $d-name $nlines $id))\n\n           (report 'desc: %s, no rcs-id, skipping.' $d-name)))\n\n       (report 'desc: %s, _err: %s' $d-name $_err))\n\n     $nlines)\n   (desc-list))))\n)",
      "pprint-desc" : "(fn (desc depth -- pad pad0)\n  (= pad (repeat '  ' $depth))\n\n  (if\n    (undef?  $desc)  (printf '%snull,\\n'   $pad)\n    (sym?    $desc)  (printf '%s%s,\\n'   $pad \"sym:$desc\")\n    (string? $desc)  (do\n         (= pad0 $pad)  (= pad '')\n         (map-list (fn (line)\n             // $line is already encoded? Don't double encode...\n             // (printf '%s%s\\n' $pad $line)\n             (emit (sprintf '%s%s\\n' $pad $line))\n             (= pad $pad0)\n             (_++ n-lines))\n           (split '\\n' \"\\\"$desc\\\",\"))\n        (_-- n-lines)\n    )\n\n    (list?   $desc)  (do\n         (printf '%s[\\n' $pad)\n         (map-list (fn (_)\n              (pprint-desc $_ (+ 1 $depth)))\n           $desc)\n         (printf '%s],\\n\\n' $pad)\n         (_++ n-lines)\n    )\n\n    (hash?   $desc)  (do\n         (printf '%s{\\n' $pad)\n         (map-list (fn (key)\n             (printf '%s%s : ' $pad $key)\n             (pprint-desc (hash-get $desc / $key) (+ 1 $depth)))\n           (sort-alpha (hash-keys $desc /)))\n         (printf '%s},\\n\\n' $pad)\n         (_++ n-lines)\n    )\n  )\n  (_++ n-lines)\n)",
      "pprint-desc-list" : "(fn (desc depth out -- pad pad0)\n  (if (undef? $depth) (= depth 0))\n  (if (undef? $out)   (= out   (list)))\n\n  (= pad (repeat '  ' $depth))\n\n  (if\n    (undef?  $desc)  (push $out (sprintf '%snull,\\n'   $pad))\n    (sym?    $desc)  (push $out (sprintf '%s%s,\\n'   $pad \"sym:$desc\"))\n    (string? $desc)  (do\n         (= desc \"\\n$desc\")\n         (= pad0 $pad)  (= pad '')\n         (map-list (fn (line)\n             // $line is already encoded? Don't double encode...\n             // (printf '%s%s\\n' $pad $line)\n             (push $out (sprintf '%s%s\\n' $pad $line))\n             (= pad $pad0)\n             (_++ n-lines))\n           (split '\\n' \"\\\"$desc\\\",\"))\n        (_-- n-lines)\n    )\n\n    (list?   $desc)  (do\n         (push $out (sprintf '%s[\\n' $pad))\n         (map-list (fn (_)\n              (pprint-desc-list $_ (+ 1 $depth) $out))\n           $desc)\n         (push $out (sprintf '%s],\\n\\n' $pad))\n         (_++ n-lines)\n    )\n\n    (hash?   $desc)  (do\n         (push $out (sprintf '%s{\\n' $pad))\n         (map-list (fn (key)\n             (push $out (sprintf '%s%s : ' $pad $key))\n             (pprint-desc-list (hash-get $desc / $key) (+ 1 $depth) $out))\n           (sort-alpha (hash-keys $desc /)))\n         (push $out (sprintf '%s},\\n\\n' $pad))\n         (_++ n-lines)\n    )\n  )\n\n  (_++ n-lines)\n\n  $out\n)",
      "pprint-diffs" : "(fn (d-name rev1 rev2 -- desc-1 desc-2 text-1 text-2 opts)\n  (= opts (hash reload 1 no-onload 1 no-cache 1))\n\n  (var-push reply-json   $reply-json)\n  (var-push pprint-diffs $pprint-diffs)\n  (desc-read desc-1 $d-name (hash revision $rev1 @$opts))\n  (desc-read desc-2 $d-name (hash revision $rev2 @$opts))\n  (var-pop pprint-diffs)\n  (var-pop reply-json)\n\n  (= text-1 (join '' (pprint-desc-list $desc-1)))\n  (= text-2 (join '' (pprint-desc-list $desc-2)))\n\n  (diff $text-1 $text-2)\n)",
      "pprint-diffs-fine" : "(fn  (d-name r1 r2)\n  (foreach n (.. $r1 $r2)\n    (report \"n: $n\")\n    (= nn (+ 1 $n))\n    (hash\n      0-n     \"$n -> $nn\"\n      1-diffs (catch\n                (pprint-diffs $d-name \"1.$n\" \"1.$nn\")\n                (hash err $_err)))))",
      "pprint-line" : "(fn (line) (printf '%s%s\\n' (repeat '. ' $depth) $line))"
   },
   "api-entry-points" : "(hash\n  GET/                             1\n  GET/~desc-name~                  1\n  GET/~desc-name~/~rev-1~/~rev-2~  1\n)",
   "api-handlers" : {
      "1" : "1"
   },
   "cmdline" : "./dpl -eval '(desc-read self pretty-print) (pprint-all)' > /dev/null",
   "main" : "(fn ()\n  (if (undef? $req-desc-name) (return (reply-usage)))\n\n  (if (defined? $req-rev-2)\n    (return (reply-json\n      (pprint-diffs-fine $req-desc-name $req-rev-1 $req-rev-2))))\n\n  (desc-read desc $req-desc-name (hash reload 1))\n\n  (ct)(bl)\n  (= n-lines (pprint $desc))\n  (eprint '--\\n\\n')\n  (report 'n-lines: %d' $n-lines)\n)",
   "on-load" : "(fn ()\n  (def-hash-fn $self / reply-usage)\n\n  (def-hash-fn $self /api pprint)\n  (def-hash-fn $self /api pprint-all)\n  (def-hash-fn $self /api pprint-desc)\n  (def-hash-fn $self /api pprint-desc-list)\n  (def-hash-fn $self /api pprint-line)\n  (def-hash-fn $self /api pprint-diffs)\n  (def-hash-fn $self /api pprint-diffs-fine)\n)",
   "rcs-id" : "$Id: pretty-print,v 1.3 2015/06/17 15:56:46 www-data Exp www-data $",
   "reply-usage" : "(fn ()\n  (ct)(bl)\n\n  (print <<FINI\nUsage:\n  .../api/pretty-print\n         This usage message.\n\n  .../api/pretty-print/-desc-name-\n         Pretty print the named descriptor, and report number of lines.\n\n  .../api/pretty-print/-desc-name-/-rev1-/-rev2-\n         Pretty print the two versions of the named descriptor\n         and report incremental differences between the two.\n\nFINI)\n)",
   "request-from-client" : {
      "schema" : {
         "HTTP" : {
            "GET" : {
               ".on-match." : "(hash-eval $self /api-handlers 1)",
               "~desc-name~" : {
                  ".on-match." : "(hash-eval $self /api-handlers 1)",
                  "rev-1" : {
                     "rev-2" : {
                        ".on-match." : "(hash-eval $self /api-handlers 1)"
                     }
                  },
                  "~rev-1~" : {
                     "~rev-2~" : {
                        ".on-match." : "(hash-eval $self /api-handlers 1)"
                     }
                  }
               }
            }
         }
      }
   }
}
