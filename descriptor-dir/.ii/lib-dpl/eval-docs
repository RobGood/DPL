{
   "Installation" : {
      "html" : "(= vers (hash-get (version) / version))\n\n(concat \n (html-h 3 'DPL Installation')\n (html-h 4 Dependancies)\n (html-p (concat\n    (html-ul (concat  \n      (html-li 'Perl JSON module, install as root: <tt>cpan JSON</tt>')\n      (html-li 'Perl Term::ReadLine::Gnu module, termcap or ncurses libraries')\n      (html-li RCS)\n   ))\n ))\n\n (html-p (concat\n   'Dip in or dive in?'\n ))\n\n (html-h 4 '1. Dip in: Unpack and try it in place')\n (html-p (concat\n   (html-ul (concat\n      (html-li (concat (html-link 'http:/api/eval?expr=(get-DPL-dist)' 'Download distribution file') ','))\n      (html-li \"Unpack distribution file, &nbsp; <tt>tar xvpzf DPL-$vers.tar.gz</tt>\")\n      (html-li \"Try it out, &nbsp; <tt>cd DPL-$vers && ./dpl -eval '(Help)' && ./dpl</tt>\")\n      (html-li '?')\n      (html-li 'Profit!')\n   ))\n ))\n\n (html-h 4 '2. Dive in: Regular installation')\n (html-p (concat\n   'These destination directories are assumed.  Adjust instructions as needed.'\n   (html-ul (concat\n     (html-li '<tt>/usr/local/bin</tt>')\n     (html-li '<tt>/usr/local/lib/perl</tt>')\n     (html-li '<tt>/var/www/cgi-bin</tt>')\n     (html-li '<tt>/var/www/cgi-bin/descriptor-dir</tt>')\n   ))\n   'There are four files and a directory  containing several descriptors in the installation.'\n ))\n\n (html-h 5 '2.1. One time things')\n  (html-h 6 'Check directory permissions')\n   (html-p (concat\n     ''\n   ))\n  (html-h 6 'Make some symlinks')\n   (html-p (concat\n     ''\n   ))\n (html-h 6 'Tweak shell config')\n  (html-p (concat\n    'Make sure that the directory where <tt>dpl</tt> and <tt>dplx</tt> will be installed '\n    '(e.g. <tt>/usr/local/bin</tt>) is mentioned in your <tt>$PATH</tt> environment variable.' <br/>\n  ))\n  (html-p (concat\n    'Make sure that the directory where <tt>PrimaLisp.pm</tt> will be installed '\n    '(e.g. <tt>/usr/local/lib/perl</tt>) is mentioned in your <tt>$PERL5LIB</tt> environment variable.'\n  ))\n\n  (html-h 6 'Tweak webserver config (blatent URI image management)')\n  (html-p (concat\n   'Look in your web server config file for a line like this:'\n   <pre>'ScriptAlias /cgi-bin/ \"/var/www/cgi-bin/\"'</pre>\n   'Copy that line and change the copy so it looks like this:'\n   <pre>'ScriptAlias /api/ \"/var/www/cgi-bin/\"'</pre>\n    'Restart your webserver. A soft restart should work.'\n  ))\n\n (html-h 5 '2.2. Once per update things')\n  (html-h 6 'Copy a few files')\n  (html-p (concat\n   'Copy the files/directories in the distribution to these destination directories.'\n   (html-ul (concat\n    (html-li (concat\n      '<tt> /usr/local/bin <- dpl, dplx </tt>'  \n    ))\n\n    (html-li (concat\n      '<tt> /usr/local/lib/perl <- PrimaLisp.pm </tt>'\n    ))\n\n    (html-li (concat\n      '<tt> /var/www/cgi-bin <- dple, dplx, descriptor-dir </tt>'\n    ))\n   ))\n  ))\n\n (html-h 5 '2.3. Try it out')\n (html-p (concat\n   'Point your favorite browser/web client at ' (html-link http://your.host.name/api/eval) ' ...'\n ))\n)"
   },
   "README" : {
      "00-intro" : {
         "00" : "(html-p (concat\n   '<i>It\\'s a programming language you can talk to web APIs with, '\n   'but it\\'s also a web API language you can program in.</i>'\n ))\n\n---------\n\nIt is a safe virtualized distributed programming language that\n'drives' the underlying implementation languages.\n\nSince expressions are evaluated recursively, expression evaluation\nultimately comes down to evaluating a literal or a function call.\nFunctions are defined by (def-fn) or are builtin.\n\nLiterals are ground terms.\nBarring recursive loops, it all comes down to the builtins.\n\nEvaluating a builtin function is done by calling a function in the implementation\nlanguage code behind the builtin.  So evaluating an expression can be seen as\nmaking a series of coordinated calls to specific implementation language functions.\nThe calls are coordinated by the structure of the expression tree.\n\nRun Time Environments do expression evaluation and should be written\nin a variety of conventional programming languages.  Then, any library\nfunctionality available in a given language can be exposed to\nexpressions as builtin functions by an RTE implemented in that language.\nRemote evaluation (rem-eval) then exposes this functionality to expression\nevaluation on a variety of RTE implementations. \n\nThe upshot is that the functionality available to expression evaluation\nis the *union* of the functionality of the accessible Run Time Environments. \nSo (with a set of suitably configured RTEs) PrimaLisp is able to\nconsistantly offer more library functionality than any other programming language.\n\n  (... one language to rule them all, and with web protocols bind them?)\n\n... and evaluating an expression is the same as running a program.\n\n---------\n\nImagine if in the web 1.0 days someone had suggested (and even built) a\nwebsite that would allow anyone to create and edit pages on it.\n\nImagine if in the web 2.0 days someone had suggested (and even built) a\nwebsite that would allow anyone to create and edit web services/apps on it.",
         "html" : "/*\n\n runtime environments implemented in several popular[1] programming languages, and \nbuiltin extensions for a particular library you want to use\n\n\n**assuming runtime environments and builtin extensions implemented in several popular languages,** \n               'DPL offers more (library) functionality than any other programming language.')\n\n*/\n\n(html-p\n   '<i>It\\'s a web-editable \\'safe\\' virtualized distributed pragmatic composable lispy scriptish <br/>'\n   'programming language for producing, consuming, composing and transforming webservices. <br/>'\n   'It\\'s also an API language for composing requests to such services.'\n    '</i>'\n   <ul>\n    '<table border=\"0\">'\n     <tr>'<td align=\"right\" valign=\"top\">'<b>web-editable</b></td>\n         <td>'think <i>wiki</i> but instead of creating and editing source for web pages,' <br/>\n             'you create and edit source for web apps and services.  ' <br/>\n             'but like a wiki, you can do it through a browser, from anywhere,' <br/>\n             'and edits are automatically versioned.'</td></tr>\n\n     <tr>'<td align=\"right\" valign=\"top\">'<b>'\\'safe\\''</b></td>\n         <td>'as in \\'\\'safe\\'\\' to run arbitrary web-edited code, where \\'\\'safe\\'\\' means ' <br/>\n             'DPL code can\\'t access the underlying filesystem, or invoke arbitrary ' <br/>\n             'processes from the runtime environment (if you can it\\'s bug not a feature!).' <br/>\n             '\\'\\'safe\\'\\' does not mean immune to DoS, or CPU, memory or disk space exhaustion by DPL code.'</td></tr>\n\n     <tr>'<td align=\"right\" valign=\"top\">'<b>virtualized</b></td>\n         <td>'suppose that for most 'useful' libraries you want to use there are DPL runtime' <br/>\n             'environments implemented in the same languages as the libraries,' <br/>\n             'and builtin function extensions that expose the library functionality to DPL code.'<br/>\n             'then DPL code in that runtime environment can access the library\\'s functionality.' </td></tr>\n\n     <tr>'<td align=\"right\" valign=\"top\">'<b>distributed</b></td>\n         <td>'code from one runtime environment can be run in another (local or remote)' <br/>\n             'runtime environment, and the results returned.'</td></tr>\n\n     <tr>'<td align=\"right\" valign=\"top\">'<b>pragmatic</b></td>\n         <td>'vs. dogmatic. primary data type is a deserialized JSON object, array, string or literal.'</td></tr>\n\n     <tr>'<td align=\"right\" valign=\"top\">'<b>composable</b></td>\n         <td>'functional style but not functionally dogmatic (e.g. variables contain mutable state,' <br/>\n             'and are even first class elements in the language.) ' <br/>\n             'everything is an expression, or a series of expressions.' <br/>\n             'expressions contain comments, literals, quoted strings and function (or macro) calls.'</td></tr>\n\n     <tr>'<td align=\"right\" valign=\"top\">'<b>lispy</b></td><td>'S expression syntax, macros, repl.'</td></tr>\n\n     <tr>'<td align=\"right\" valign=\"top\">'<b>scriptish</b></td>\n         <td>'think scripting language look and feel, not compiled language look and feel.' <br/>\n             'think of the text between parens as a shell command.  Whitespace delimits the arguments,' <br/>\n             'so only strings containing whitespace or characters:'\n                 '<tt><b>\\'  \"  { } [ ] (  )  $ @ ,</b></tt> need to be quoted.' <br/>\n             'also don\\'t think interpreter vs. compiler.'<br/>\n             'the runtime environment implementation details are orthogonal to' <br/>\n             'the language syntax and semantic details this description refers to.'</td></tr>\n\n    <tr>'<td valign=\"top\">'<b>programming</b></td><td>'<tt>(def-fn recursion () See (recursion))</tt>'</td></tr>\n    </table></ul>\n)"
      },
      "05-names" : {
         "html" : "(concat\n (html-h 4 'PrimaLisp, Descriptors, DPL')\n (html-p\n   (html-ul\n    (html-li (html-b PrimaLisp) ' is the expression language, builtin functions and runtime environment.' <br/>\n        ' You could think of it as the <i>inward</i> facing part of DPL' <br/>\n        ' in that it views a string (one of its main data types) as input to be parsed and interpreted.')\n\n    (html-li (html-b Descriptors) ' are generalized (internal) persistant data structures that are actually'\n        ' (deserialized) JSON objects containing, <br/> among other data, various PrimaLisp expressions which implement '\n        ' a DPL program.' <br/>\n        ' You could think of them as the <i>outward</i> facing part of DPL' <br/>\n        ' in that they view strings as data items organized into maps and lists.')\n\n    (html-li (html-b DPL) ' (Descriptors/PrimaLisp) is the union of these views about strings, where Descriptors are:'\n        (html-ul\n         (html-li 'used to store PrimaLisp expressions, i.e the code for a DPL program,')\n         (html-li 'DPL\\'s main data type, and')\n         (html-li 'what the rest of the world is using when they send JSON around.')\n        )\n        'A few naming conventions make the magic happen.')\n  )\n )\n)"
      },
      "10-examples" : {
         "html" : "(concat\n (html-h 4 (concat 'Try some ' (html-link /api/eval/Examples Examples)))\n\n/*\n (html-p (concat\n   'In one tab/window go here:  ' (html-link \"/api/eval/Examples http://${host}/api/eval/Examples\") <br/>\n   'In a second tab/window go here:  ' (html-link \"/api/eval http://${host}/api/eval\") <br/>\n   <ul>  <li> 'Pick an example from the first page and <i>copy</i> it,'\n         <ul>  <li> '<i>Paste</i> it into the big text box on the second page,'\n               <ul> <li> \"Hit <tt>evaluate</tt>\" </li> </ul></ul></ul>\n ))\n*/\n  ()\n\n (html-ol (concat\n  <li>(html-p (concat \n   'Go here: '\n   (html-link /api/eval \"http://${host}/api/eval\")))</li>\n\n  <li>(html-p (concat\n   'Put PrimaLisp expressions (see ' (html-link /api/eval/Examples Examples)\n   ') in the big text area, and hit <tt>evaluate</tt>' <br/>\n   '. or GET ' (html-link /api/eval?expr=PrimaLisp-EXPRESSIONS-HERE\n                          \"http://${host}/api/eval?expr=PrimaLisp-EXPRESSIONS-HERE\") <br/>\n   '. . or a web client can POST one or more PrimaLisp expressions to '\n   (html-link /api/eval \"http://${host}/api/eval\")))</li>\n\n  <li>(html-p (concat\n   \"The expressions are evaluated and the last expression's\"\n   \"value is returned as the response body.\" <br/>))</li>\n ))\n\n // (html-p (concat \"It's an online REPL.  Hey, it's a PERL!  POST, Eval, Return Loop.\"))\n\n (html-p (concat\n  'The expressions you enter can range from a number or string or simple function calls to' <br/>\n  'function definitions or a complete PrimaLisp program, and <tt>eval</tt> will run it.'\n ))\n)"
      },
      "15-builtins" : {
         "html" : "(concat\n (html-h 4 'PrimaLisp Builtin Functions')\n (html-p (concat\n  'The interpreter\\'s builtin functions are listed in various forms below.' <br/>\n\n  'internal usage messages: ' (html-link (sprintf /api/eval?expr=%s \"(ct)(bl)(Help)\")\n                                         (sprintf http://%s/api/eval?expr=%s $host \"(ct)(bl)(Help)\")) <br/>\n  'man pages: ' (html-link /api/dplx/man \"http://${host}/api/dplx/man\")\n ))\n)"
      },
      "20-response-codes" : {
         "html" : "(concat\n (html-h 4 'HTTP response status codes')\n (html-p (concat\n 'Web clients should expect one of these types of responses:'\n '<table cellspacing=\"2\" cellpadding=\"3\" border=\"1\" valign=\"top\">'\n <tr><th>code</th><th>status</th><th>response</th></tr>\n <tr><td>200</td><td> OK          </td><td>\"All's well. Response body is the value of the last expression evaluated.\"</td></tr>\n <tr><td>204</td><td>\"No Content\" </td><td>\"All's well. Return value is undefined, i.e. an 'undefined' value.\"       </td></tr>\n <tr><td>400</td><td>\"Bad Request\"</td><td>\"Exception! Response body is the exception message.\"                      </td></tr>\n </table>))\n)"
      },
      "30-other-things" : {
         "html" : "(concat\n (html-h 4 'Some things implemented in DPL')\n (html-p (concat\n  (html-link /api/dple/eval \"http://${host}/api/dple/eval\") ' This descriptor and docs' <br/>\n  (html-link /api/dple/dplx \"http://${host}/api/dple/dplx\") ' The dispatcher' <br/>\n ))\n)"
      },
      "35-svn" : {
         "html" : "(concat\n (html-h 4 'Source in SVN')\n (html-p  (html-link http://srvdevsrc01:8888/svn/MaiTai/trunk/source/staging/Descriptor_PrimaLisp))\n)"
      },
      "40-download" : {
         "html" : "(= vers (hash-get (version) / version))\n\n(concat\n (html-h 4 (concat\n  'Download '\n  (html-link '/api/eval?expr=(get-DPL-dist)' \"DPL-$vers\") \" distribution file\"\n  ' '\n  (html-link '/api/eval?expr=(get-DPL-dist zip)' \"(or as a zip file)\")\n ))\n)"
      },
      "50-further-reading" : {
         "html" : "((fn (li)\n  (def-fn li-link (url) (html-li (html-link $url)))\n\n  (concat\n   (html-h 4 'Further Reading')\n   (html-p (concat\n     (html-ul (concat\n      (li-link  http://think.primal.com/lisp)\n      (li-link  http://www.google.ca/search?q=lisp)\n<br/>\n      (li-link 'http://en.wikipedia.org/wiki/Lisp_(programming_language)')\n      (li-link  http://www.paulgraham.com/lisp.html)\n      (li-link  http://groups.google.com/group/comp.lang.lisp/msg/9a06d7959cd6c941)\n      (li-link  http://planet.lisp.org/)\n      (li-link  http://landoflisp.com/)\n      (li-link  http://gigamonkeys.com/book/)\n      (li-link  http://xkcd.com/224/)\n      (li-link  http://www.schnada.de/quotes/contempt.html)\n     ))\n   ))\n  )\n))"
      },
      "html" : "(concat\n (html-h 3 \"Try out PrimaLisp!  (you might even say, 'evaluate it')\")\n\n (hash-eval $doc /README/00-intro            html)\n (hash-eval $doc /README/05-names            html)\n (hash-eval $doc /README/10-examples         html)\n (hash-eval $doc /README/15-builtins         html)\n (hash-eval $doc /README/20-response-codes   html)\n // (hash-eval $doc /README/30-other-things     html)\n // (hash-eval $doc /README/35-svn              html)\n (hash-eval $doc /README/40-download         html)\n (hash-eval $doc /README/50-further-reading  html)\n\n (html-h 4 'The \\'big picture\\'')\n (html-p '<img src=\"/dpl-tc.jpg\"/>')\n\n (html-pre '--\\nrob')\n)"
   },
   "Write-your-own" : {
      "01" : {
         "html" : "(concat\n (html-link \"/api/$target-desc/WriteYourOwn/02\" 'Step 2')\n (html-pre <<FINI\n\n1. write a function that takes a string as input,\n   and returns true if the string contains 'balanced' parentheses,\n   false otherwise.\n\n   Balanced means that every left paren is followed by a 'matching' right paren.\n\n   For example,\n    - increment a counter when a '(' is seen,\n    - decrement that counter when a ')' is seen,\n    - fail if the counter ever goes negative,\n    - fail if the counter is positve at the end of the string.\n\n   hint: don't do it that way, do it recursively.\nFINI))"
      },
      "02" : {
         "html" : "(concat\n (html-link \"/api/$target-desc/WriteYourOwn/03\" 'Step 3')\n (html-pre <<FINI\n\n2.  now, break the text between matching parens on whitespace,\n     thus into a list of tokens each of which will be:\n     - a term  (no parens or whitespace)\n     - a parenthesised string recursively unpacked into a list of tokens.\n    return the list of tokens (of tokens ...) corresponding to the parse tree\n    of the input string.\nFINI))"
      },
      "03" : {
         "html" : "(concat\n (html-link \"/api/$target-desc/WriteYourOwn/04\" 'Step 4')\n (html-pre <<FINI\n\n3. now, write an function that is an S expression parser.\n    handle various edge cases.\nFINI))"
      },
      "04" : {
         "html" : "(concat\n (html-link \"/api/$target-desc/WriteYourOwn/05\" 'Step 5')\n (html-pre <<FINI\n\n4. now, modify the parser to accept single quoted strings as terms.\n    escapes within the quoted string:\n       \\'  represents a single quote and\n       \\\\  represents backslash.\n\n     now a term can also be a quoted string.\nFINI))"
      },
      "05" : {
         "html" : "(concat\n (html-link \"/api/$target-desc/WriteYourOwn/06\" 'Step 6')\n (html-pre <<FINI\n\n5. now, call the parser function:  eval\n    have it read an input string as a series of tokens,\n    and return the last token read.\nFINI))"
      },
      "06" : {
         "html" : "(concat\n (html-link \"/api/$target-desc/WriteYourOwn/07\" 'Step 7')\n (html-pre <<FINI\n\n6. let there be λ\n    a non-empty list of tokens is deemed to be a function call,\n    which 'returns' a token.\n\n    - the first token in the list 'is' the function, any remaining tokens are the args.\n    - the function is 'called' with the args as its input.\n    - when a function is called, its 'function body' (a series of tokens) is\n      passed to the parser function eval.\n    - the token returned by eval is the token returned by the function call.\n\n    functions are defined by the list you get when you parse a string\n    of the form:   (λ  (...) ...)\n     (btw in PrimaLisp you can use the name 'fn' as well as λ)\n\n      - this string looks like a function call but it is the 'function literal'\n      - it's basically a template for the function,\n        parts of which are passed to eval when the function is called.\n\nFINI))"
      },
      "07" : {
         "html" : "(concat\n (html-link \"/api/$target-desc/WriteYourOwn/08\" 'Step 8')\n (html-pre <<FINI\n\n7. let there be values\n    - an empty list of tokens is deemed to have the 'undefined value'.\n    - an unquoted string is deemed to have a 'defined value' equal to itself.\n    - a single quoted string is deemed to have a 'defined value' equal to the string\n      withing the pair of single quotes, after backslash unescaping is performed.\n    - a list is deemed to have a 'defined value' of the token returned\n      by the corresponding function call.\n\n    - the undefined value, null string '' and the string 0 are deemed to be false.\n    - all other values are deemed true.\n    - canonically: true -> 1  false -> 0\nFINI))"
      },
      "08" : {
         "html" : "//     (catch ...)\n//     (expr-to-list ...)\n\n(concat\n (html-link \"/api/$target-desc/WriteYourOwn/09\" 'Step 9')\n (html-pre <<FINI\n\n8. let there be:\n     (if ...)\n     (while ...)\nFINI))"
      },
      "09" : {
         "html" : "(concat\n (html-link \"/api/$target-desc/WriteYourOwn/10\" 'Step 10')\n (html-pre <<FINI\n\n9. let there be variables\nFINI))"
      },
      "10" : {
         "html" : "(concat\n (html-link \"/api/$target-desc/WriteYourOwn/11\" 'Step 11')\n (html-pre <<FINI\n\n10. let there be macros\nFINI))"
      },
      "11" : {
         "html" : "(concat\n (html-link \"/api/$target-desc/WriteYourOwn/12\" 'Step 12')\n (html-pre <<FINI\n\n11. let there be builtin functions!\nFINI))"
      },
      "html" : "(concat\n (html-h 3 'Write your own PrimaLisp interpreter!')\n\n (if (undef? $req-wyo-page)\n   (html-link \"/api/$target-desc/WriteYourOwn/01\" 'Step 1')\n   (hash-eval $doc \"/Write-your-own/$req-wyo-page\" html))\n)"
   },
   "_useCount" : 284,
   "html" : "(= userid (login))\n(= eval-uri (if (undef? $userid) /api/eval  /api/dplx/eval))\n(= dple-uri (if (undef? $userid) /api/dple  /api/dple))\n(= dplx-uri (if (undef? $userid) /api/dplx  /api/dplx))\n\n(= hist      (new-inst eval-history $session-id))\n(= hist-list ($hist get-hist-log))\n(= n-hist    (list-len $hist-list))\n(= n-hist-1  (- $n-hist 1))\n\n(= rec (if (defined? $req-pos) (ith $hist-list $req-pos)))\n\n(if (defined? $req-pos) (do\n  (= range (.. (- $req-pos 10) (+ $req-pos 10)))\n  // (map-list report $range)\n\n  (while (< (first $range) 0)       (shift $range))\n  (while (&& (list-len $range) (> (last  $range) $n-hist-1))\n     (pop   $range))\n\n  (= range-2 (map-list (fn (_)\n      (if (== $_ $req-pos) \n        \"<b>$_</b>\"\n        (html-link \"${eval-uri}/history/$_\" $_)))\n    $range))\n))\n\n\n(reply-html\n (html-html {} (concat\n  (html-head (concat\n   (html-style {} $<incl/dpl.css>)\n   (html-title $title)))\n\n  (html-body\n   // {link '#808080' vlink '#404040' text black  bgcolor '#f0f0f0'}\n      {link white     vlink '#a0a0a0' text white  bgcolor black    }\n   (concat\n     (if (defined? $req-pos) (html-p (join '&nbsp;' $range-2)))\n     (if (defined? $req-pos) (html-h 4 (sprintf 'expression evaluated at %s %s'\n                              (= t (hash-get $rec / t0)) (time-to-date $t))))\n\n    (html-form GET $eval-uri (concat\n      '<table border=\"0\">'\n      '<tr><td bgcolor=\"green\">'\n      (html-textarea text expr (max 25 $nrows) (max 80 $ncols)\n                                                (utf8-encode \"$blurb\\r\\n\\r\\n\"))\n      '</td><td valign=\"top\">'\n      '<input type=\"submit\" value=\"evaluate\"/>' <br/><br/>\n      (html-link  \"${eval-uri}/README\"              README)<br/>\n      (html-link  \"${eval-uri}/Examples\"            Examples)<br/>\n      (html-link  \"${eval-uri}/Installation\"        Installation)<br/>\n      (html-link  \"${eval-uri}/WriteYourOwn\"        'Write your own')<br/>\n      <br/>\n      (html-link  \"${eval-uri}\"                    'New Eval')<br/>\n      (html-link  \"${eval-uri}/history\"            'Eval History')<br/>\n      (html-link  \"${dple-uri}/eval\"                'Edit Source')<br/>\n      (html-link  \"${dplx-uri}/man\"                 'Man Pages')<br/>\n      (html-link  \"${dple-uri}\"                    'DPL Editor')<br/>\n      (if (defined? $share-url)\n        (concat (html-link $share-url 'Share expression') <br/>)\n        '')\n      <br/>\n      (html-link \"${eval-uri}?expr=(ct)(bl)(Help)\" Builtins)<br/>\n      (html-link \"${eval-uri}?expr=(date)\"         Date)<br/>\n      (html-link \"${eval-uri}?expr=(version)\"      Version)<br/>\n      (html-link \"${eval-uri}?expr=(get-DPL-dist)\" 'Download ')\n        (html-link \"${eval-uri}?expr=(get-DPL-dist zip)\" zip)\n      </td></tr></table>\n\n   (html-p \"session: $session-id\")\n\n   (if (defined? $blurb2)\n     (concat\n       (html-h 4 (sprintf 'value returned at %s %s'\n              (= t (hash-get $rec / t1)) (time-to-date $t)))\n       <pre> (xmlencode $blurb2) </pre>))\n\n  ''\n)))))))",
   "rcs-id" : "$Id: eval-docs,v 1.296 2013/03/26 19:20:17 apache Exp apache $"
}
