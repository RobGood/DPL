#!/usr/bin/perl -w -T

BEGIN {
    $ENV{PATH} = "/bin:/usr/bin:/usr/local/bin";
    push @INC, '.', '/usr/local/lib/perl';
    $ENV{PERL5LIB} = "/usr/local/lib/perl";
}

package DPL_Daemon;

use base qw(Net::Server::HTTP);

use PrimaLisp;
use JSON -convert_blessed_universally;
use Encode;
use HTML::Entities;
use HTTP::Date;
use DB_File;
use FileHandle;


#-----------------------------------------------------------

sub
convert_query_string_to_hash {
    my ($qstr) = @_;

    return {} unless defined $qstr;

    $qstr =~ s/^\?//;
    my @parts = split '&', $qstr;

    my $qhash = {};
    map { my ($n, $v) = split('=', $_); $qhash->{urldecode $n} = urldecode $v if defined $n && defined $v } @parts;

    return $qhash;
}


sub
convert_request_header_to_hash {
    my ($hdrs) = @_;

    return { map { lc $_->[0] => $_->[1] } @$hdrs};
}

#-----------------------------------------------------------
# Overriding Net:Server::HTTP method here...  It generates an incorrect Date header...
sub http_base_headers {
    my $self = shift;

    my $datestr = get_RFC_Date;

    return [
        [Date => $datestr ],
        [Connection => 'close'],
        [Server => $self->server_revision],
    ];
}

#-----------------------------------------------------------

# Handle returning specific files.
# Not a generalized web server.
my %contentTypes = (
  '/robots.txt'  => 'text/plain',
  '/favicon.ico' => 'image/x-icon',
);



sub
file_send_from_doc_root_h {
  my ($server) = @_;

  my $reqInfo = $server->http_request_info();
  my $path    = $reqInfo->{request_path};
  my $method  = $reqInfo->{request_method};

  my $contentType = $contentTypes{$path};
  if(!defined $contentType) {
    my $msg = 'Nothing Found :(';
    $server->send_status(404, $msg, "<b>$msg</b>");
    return;
  }

  my $file = "doc-root$path";

  my $fh = new FileHandle("< $file");
  if(!defined $fh) {
    my $msg = 'Nothing Found :(';
    $server->send_status(404, $msg, "<b>$msg</b>");
    return;
  }

  my $data;

  { local $/ = undef; $data = <$fh> }
  close $fh;

  my $contentLength = length($data);
  my @st = stat $file;

  if($method eq 'HEAD') {
      undef $data;
  }

  print sprintf "Last-Modified: %s\r\n", get_RFC_Date($st[9]);
  print sprintf "Content-Length: %d\r\n", $contentLength;
  print sprintf "Content-Type: %s\r\n", $contentType;
  print "\r\n";
  print $data if defined $data;

  return;
}

sub
default_root_h {
    my ($server) = @_;

    my $reqInfo    = $server->http_request_info();
    # printf STDERR "reqInfo: %s\n", to_json($reqInfo, {pretty => 1});

    my $pathInfo   =  $reqInfo->{request_path};
    my $method     =  $reqInfo->{request_method};

    my $query_hash  = convert_query_string_to_hash $reqInfo->{query_string};
    my $header_hash = convert_request_header_to_hash $reqInfo->{request_headers};

    printf STDERR "query_hash: %s\n", encode_utf8 to_json($query_hash, {pretty => 1});
    printf STDERR "header_hash: %s\n", encode_utf8 to_json($header_hash, {pretty => 1});

    # ...
    print "Content-Type: text/plain\r\n";
    print "\r\n";
    print "fnord!\n";

    return;
}

#--------------------------------

my $Version = '$Revision: 1.24 $';
$Version =~ / (.+) /;
$Version = $1;

# dev hack
my $hostname = `/bin/hostname`;  chomp $hostname;

# Untainting.
die sprintf("[%s] Invalid hostname", scalar(gmtime))
    unless $hostname =~ /^([\w-]+)$/;

$hostname = $1;

my $http_port  = $hostname =~ /^rcg-mint\d+/ ? 8080 : 80;
my $https_port = $hostname =~ /^rcg-mint\d+/ ? 8443 : 443;
# dev hack

printf STDERR "[%s] Starting on %s, port %d version %s\n", scalar(gmtime), $hostname, $http_port, $Version;

#-----------------------------------------------------------
# Start the server.

DPL_Daemon->run(
    # port  => [ $http_port, "$https_port/ssl" ],
      port  => [ $http_port ],


    # user => 'nobody',  group => 'nogroup',

    ipv   => '*', # IPv6 if available

    # SSL_key_file  => '/etc/ssl/private/primal_bundle_2014.pem',
    # SSL_cert_file => '/etc/ssl/private/primal_bundle_2014.pem',

    access_log_file => 'access.log',
    log_file        => 'error.log',

    server_revision => "-version-",

    app => [
      { '/robots.txt'      => sub { file_send_from_doc_root_h @_ } },
      { '/favicon.ico'     => sub { file_send_from_doc_root_h @_ } },
      { '/'                => sub { default_root_h @_ } },
    ],
);


exit 0;

